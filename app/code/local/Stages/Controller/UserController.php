<?php
/**
 * class Stages_Controller_UserController
 * 
 * @package Stages
 * @category Controller
 * @copyright Copyright (c) 2010 Hettema&Bergsten
 * @author <aliaseldhose@ceegees.in>
 */
class Stages_Controller_UserController extends Core_Controller_Action
{
    /**
     * Check whether the user is already logged in
     * @return bool 
     */    
    private function isUserLoggedIn()
    {
        return (bool)$this->_getSession()->getUser();
    }
    
    /**
     * Submit the signup data and create the user account after validation
     * Redirect to homepage after creating the user
     * 
     * @return bool 
     */
    public function signup_submitAction()
    {
        $signup = $this->_getSession()->getSignup() ? $this->_getSession()->getSignup() : App_Main::getModel('core/object');
        switch ($signup->getMode())
        {
            case 'bc_token_connect':
                $data['username'] = $this->getRequest()->getParam('username');
                $data['password'] = $this->getRequest()->getParam('password');
                $data['bc_auth_token'] = $this->getRequest()->getParam('bc_token');
                $data['bc_host'] = $signup->getHost();
                $user = App_Main::getSingleton('stages/user', $data);
                $user->completeSignup();
            break;
        }
        if(!$user || !$user->getId()) { return $this->_redirect(''); }
        $user->setSessionuser();
        return $this->_redirect('');
    }

    /**
     * Check for existing email address among the registered users
     * 
     */
    public function check_uniqueAction()
    {
        $email = $this->getRequest()->getParam('email');
        $error = array();
        $user = App_Main::getModel('stages/user');
        if($user->checkExistingUsername($email)) {
            $error['rname'] = "Email is already registered";
        }
        if(empty($error)) {
            echo Zend_Json::encode(array('success'=>1));
        } else {
            echo Zend_Json::encode(array('success'=>0, 'message'=>$error));
        }
    }

    /**
     * Login to the user account
     * If the user have opted for resetting the password, the corresponding method will be initialized
     * 
     * @return type 
     */
    public  function loginAction()
    {
        $request = $this->getRequest();
        if($request->getParam('submit') == 'Email my new password') {
            return $this->forgot_passwordAction();
        }

        $user = App_Main::getModel('stages/user');
        // Try loggin in with te user supplied credentials
        if($user->login($request->getParam('login_name'), $request->getParam('login_pass'))) {

            /*if(!$this->_getSession()->getSignup() && !$user->getIsBetaTester()) {
                $this->_getSession()->addNotice('Sorry! Stages is in closed beta at the moment. Please sign up for the beta queue');
                return $this->_redirect('');
            }*/
            $this->_getSession()->setUser($user);
            //check whether the change password on next login flag is set
            if($user->getPromptPasswordChange()) {
                return $this->change_password_promptAction();
            }
            return $this->_redirect('project/index/view');
        } else { //login failed
            $this->getLayout()->getBlock('root')->addBodyClass('home');
            $contentMain = $this->getLayout()->createBlock('stages/login', 'content-main', array('template'=>'stages/login.phtml', 'header_message'=>'Login To Stages', 'message'=>$this->_getSession()->getMessages(true)->toString()));
            $this->getLayout()->getBlock('content')->append($contentMain, 'content-main');

            //add the login failed block
            $loginFailed = $this->getLayout()->createBlock('core/template', 'login-failed', array('template'=>'stages/login_failed.phtml'));
            $this->getLayout()->getBlock('content')->append($loginFailed, 'login-failed');
            $this->renderLayout();
        }
    }

    /**
     * Unset the user from session and redirect to home page a.k.a login page
     * @return bool 
     */
    public function logoutAction()
    {
        $this->_getSession()->unsUser();
        return $this->_redirect('');
    }
    
    /**
     * Reset the user passowrd with a random password generated by the system 
     * and email it to the user email
     * @todo change the method by keeping one validation email before generating the passord automated password
     * @return type 
     */
    public  function forgot_passwordAction()
    {
        $user = App_Main::getModel('stages/user')->load($this->getRequest()->getParam('login_name'), 'email');
        if($user->getId()) {
            $user->resetPassword();
            $this->_getSession()->addSuccess('Password sent to your registered email address');
        } else {
             $this->_getSession()->addError('Unknown email address');
        }
        return $this->_redirect('');
    }

    /**
     * View the user profile
     */
    public function view_profileAction()
    {
        $userId = $this->getRequest()->getParam('user');
        if($this->_getSession()->getUser() && $this->_getSession()->getUser()->getId() == $userId) {
            $this->getLayout()->getBlock('root')->addBodyClass('dashboard');
            $user = $this->_getSession()->getUser();
        } else {
            $this->getLayout()->getBlock('root')->addBodyClass('profile');
            $user = App_Main::getSingleton('stages/user')->load($userId);
        }

        $contentMain = $this->getLayout()->createBlock('stages/user/profile', 'content-main', array('template'=>'stages/user/profile.phtml'));
        $this->getLayout()->getBlock('content')->append($contentMain, 'content-main');

        $this->renderLayout();
    }

    /**
     * User setting page
     * 
     * @return type
     */
    public function settingsAction()
    {
        if(!$this->_getSession()->getUser()) {
            return $this->_redirect('init_login');
        }
        $this->getLayout()->getBlock('root')->addBodyClass('profile_settings');
        $contentMain = $this->getLayout()->createBlock('widfy/profile', 'content-main', array('template'=>'widfy/account/settings.phtml'));
        $this->getLayout()->getBlock('content')->append($contentMain, 'content-main');

        $this->renderLayout();
    }

    /**
     * Display the form to reqeust the user for password change
     * 
     * @return type 
     */
    public function change_password_promptAction()
    {
        if(!$this->getRequest()->getParam('login_pass')) { return $this->_redirect(''); }
        
        $this->getLayout()->getBlock('root')->addBodyClass('profile_settings');
        $this->getLayout()->getBlock('head')->setTitle(' Enter your new password');
        $this->getLayout()->getBlock('header_bottom')->setTemplate(false);
        $contentMain = $this->getLayout()->createBlock('widfy/profile', 'content-main', array('template'=>'widfy/account/change_password_prompt.phtml'));
        $this->getLayout()->getBlock('content')->append($contentMain, 'content-main');
        
        $this->renderLayout();
    }
    
    /**
     * Submit the new passowrd from the user and update the same after validation
     * @return type 
     */
    public function change_passwordAction()
    {
        $currPass = $this->getRequest()->getParam('password');
        $newPass = $this->getRequest()->getParam('new_password');

        //check for user session
        if(!$user = $this->_getSession()->getUser()) { echo Zend_Json::encode(array('redirect'=>  App_Main::getUrl('init_login'))); return; }
        //validate the current password 
        if(!App_Main::getHelper('core')->validateHash($currPass, $user->getPassword())) { echo Zend_Json::encode(array('success'=> 0, 'error'=>'Please enter your correct password')); return; }

        $success = array('success'=> 1);
        if($this->getRequest()->getParam('forced_from_login')) {
            $user->resetPassword($newPass, false, false);
            //check whether the signup object is defined in the session else redirect to the user profile page
            $success['redirect'] = $this->_getSession()->getSignup() ? App_Main::getUrl('init_signup_continue') : $user->getProfileUrl();
        } else {
            $user->resetPassword($newPass, false, false);
        }
        echo Zend_Json::encode($success);
        return;
    }

    /**
     * Get the JSON formated list of the basecamp users
     *  
     * @return type 
     */
    public function peopleAction()
    {
        if(!$this->isUserLoggedIn()) { echo Zend_Json::encode(array('redirect'=>  App_Main::getUrl('')));  return; }

        $people = $this->_getSession()->getUser()->getPeople();
        if(!empty($people)) {
            $jsonAttrs = array('user_id', 'firstname', 'lastname', 'bc_id', 'bc_avatar');
            $persons = array();
            foreach($people as $person) {
                foreach($jsonAttrs as $attr) {
                    $data[$attr] = @$person[$attr];
                }
                $persons[] = $data;
            }
            echo Zend_Json::encode(array('success'=>1,'people'=>$persons));
        } else { echo Zend_Json::encode(array('success'=>1)); }
        return;
    }
    
    /**
     * Get the JSON formated basecamp info for the current session user
     * 
     * @return type 
     */
    public function get_bc_infoAction()
    {
         if(!$this->isUserLoggedIn()) { echo Zend_Json::encode(array('redirect'=>  App_Main::getUrl('')));  return; }
         echo Zend_Json::encode(array('success'=>1,'bc_host'=>rtrim($this->_getSession()->getUser()->getBcHost(),'/')));
    }

    /**
     * Get JSON formatted projects information
     * 
     * @return type 
     */
    public function projectsAction()
    {
        if(!$this->isUserLoggedIn()) { echo Zend_Json::encode(array('redirect'=>  App_Main::getUrl(''))); return; }
        $projects = $this->_getSession()->getUser()->getProjectsJsList();

        if(!empty($projects)) {
            echo Zend_Json::encode(array('success'=>1,'projects'=>$projects));
        } else { echo Zend_Json::encode(array('success'=>1)); }
    }

    /**
     * Refresh the projects from basecamp 
     * 
     * @return type 
     */
    public function refresh_projectsAction()
    {
        if(!$this->isUserLoggedIn()) { return $this->_redirect(''); }
        $projects = $this->_getSession()->getUser()->getProjects(true);

        if(!empty($projects)) {
            foreach($projects as $project) {
                $project->setBcFullReload();
            }
            return $this->_redirect('project/create');
        } else { return $this->_redirect('project/create'); }
    }
    
    /**
     * Get the milestone title index formatted in JSON
     * @return type 
     */
    public function milestone_indexAction()
    {
        if(!$this->isUserLoggedIn()) { echo Zend_Json::encode(array('redirect'=>  App_Main::getUrl(''))); return; }
        $refreshBc = $this->getRequestParam('refresh');
        $bcMsIndex = $this->_getSession()->getUser()->getMilestoneIndex($refreshBc);

        if(!empty($bcMsIndex)) {
            echo Zend_Json::encode(array('success'=>1,'ms_index'=>$bcMsIndex));
        } else { echo Zend_Json::encode(array('success'=>1)); }
    }
}